Designed and Implemented a preemptive multitasking kernel 

Components :
Memory Subsystem - Page descriptors, Free pages, Page tables, Kernel malloc
Process Subsystem - Kernel threads, Context Switch, Scheduler
User Level Subsystem - VMAs, switch to ring3 and back to ring0, Page Faults
I/O Subsystem - System Calls, Terminals, Virtual File System, tarfs file access

A Shell that supports:
- Changing directories
- Executing binaries interactively
- Executing Scripts
- Set and use PATH/PS1 or user defined environment variables
- Launch background procescess
- Launch pipes

Shell Commands :
------------------- SBUSH Commands' Help -----------------
ps              Display the consise snapshot of the current processes
pwd             Print name of current working directory
cd              Change directory
cat [file_path] Output file's content. Absolute/relative file path accepted
ls [Directory]  List directory content. Absolute/relative path accepted
sleep [sec]     Suspend shell execution for an interval specified in seconds
[process] &     Start process in background Eg. sleep 20 &
echo [string]   Echo string(s) or env variables to std out Eg. Echo $PATH
env             Display key=value pairs of all current environment variables
export [k]=[v]  Set custom value to shell vars Eg. export PATH=/rootfs/bin/
sbush [file]    Execute cmds line by line (Mandatory first line : #!sbush)
shutdown        Bring the system down by killing all current processes


Get Started :
* The provided Makefile:
  1) builds a kernel
  2) copies it into rootfs/boot/kernel/kernel
  3) creates an ISO CD image with the rootfs/ contents

* To boot the system in QEMU, run:
qemu-system-x86_64 -curses -drive id=boot,format=raw,file=$USER.img,if=none -drive id=data,format=raw,file=$USER-data.img,if=none -device ahci,id=ahci -device ide-drive,drive=boot,bus=ahci.0 -device ide-drive,drive=data,bus=ahci.1 -gdb tcp::9999

Explanation of parameters:
  -curses         use a text console (omit this to use default SDL/VNC console)
  -drive ...      connect a CD-ROM or hard drive with corresponding image
  -device ...     configure an AHCI controller for the boot and data disks
  -gdb tcp::9999  listen for "remote" debugging connections on port NNNN
  -S              wait for GDB to connect at startup
  -no-reboot      prevent reboot when OS crashes

* When using the -curses mode, switch to the qemu> console with ESC-2.

* To connect a remote debugger to the running qemu VM, from a different window:
gdb ./kernel

At the (gdb) prompt, connect with:
target remote localhost:9999


References :
https://compas.cs.stonybrook.edu/courses/cse506-operating-systems-fall-17/
http://wiki.osdev.org/Expanded_Main_Page
https://www.intel.com/content/www/us/en/architecture-and-technology/64-ia-32-architectures-software-developer-vol-3a-part-1-manual.html
https://eli.thegreenplace.net/2011/09/06/stack-frame-layout-on-x86-64/
https://eli.thegreenplace.net/2012/08/13/how-statically-linked-programs-run-on-linux/
